attribute highp float data1;
attribute highp float data2;
attribute highp float data3;

uniform highp mat4 mtx_world;
uniform highp mat4 mtx_proj;
uniform highp mat4 mtx_view;
uniform highp vec4 chunks_uv[256*2];

uniform highp mat4 mtx_light;

varying mediump vec2 var_texcoord0;
varying mediump vec2 var_uvToCenter;
varying mediump vec4 var_uvSize;
varying mediump vec2 var_tiles;
varying lowp float var_light_power;

varying highp vec3 var_camera_position;
varying highp vec3 var_world_position;
varying highp vec3 var_view_position;
varying mediump vec3 var_world_normal;

//region shadow
varying highp vec4 var_texcoord0_shadow;
varying highp vec4 var_shadowmap_coord;
//endregion shadow



vec3 NORMALS[8] = vec3[](
    vec3(0, 1, 0),
    vec3(0, -1, 0),
    vec3(1, 0, 0),
    vec3(-1, 0, 0),
    vec3(0, 0, 1),
    vec3(0, 0, -1),

    vec3(0, 0, 0),
    vec3(0, 0, 0)
);
float LIGHT_POWER[8] = float[8](
    1.0,
    0.4,
    0.8,
    0.75,
    0.6,
    0.55,
    0.0,
    0.0
);

float AO_POWER[4] = float[4](
    0.5,
    0.7,
    0.80,
    1.0
);


vec2 UV_TO_CENTER[4] = vec2[4](
    vec2(1,1),
    vec2(1,-1),
    vec2(-1,-1),
    vec2(-1,1)
);

mat3 mat4_to_mat3(mat4 m) {
    return mat3(
        m[0][0], m[0][1], m[0][2],
        m[1][0], m[1][1], m[1][2],
        m[2][0], m[2][1], m[2][2]
    );
}

mat3 mat3_transpose(mat3 m) {
    return mat3(
        m[0][0], m[1][0], m[2][0],
        m[0][1], m[1][1], m[2][1],
        m[0][2], m[1][2], m[2][2]
    );
}

// Thanks to @aglitchman
// https://github.com/indiesoftby/defold-scene3d/blob/main/scene3d/assets/shaders/basic_color.vp
//
mat3 mat3_inverse(mat3 m) {
    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

    float b01 =  a22 * a11 - a12 * a21;
    float b11 = -a22 * a10 + a12 * a20;
    float b21 =  a21 * a10 - a11 * a20;

    float det = a00 * b01 + a01 * b11 + a02 * b21;

    return mat3(
        b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
        b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
        b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)
    ) / det;
}

// Thanks to @abadonna
// https://github.com/abadonna/defold-ssao/blob/main/materials/quad.vp
//
mat4 mat4_inverse(mat4 m) {
    float
    a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
    a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
    a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
    a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

    b00 = a00 * a11 - a01 * a10,
    b01 = a00 * a12 - a02 * a10,
    b02 = a00 * a13 - a03 * a10,
    b03 = a01 * a12 - a02 * a11,
    b04 = a01 * a13 - a03 * a11,
    b05 = a02 * a13 - a03 * a12,
    b06 = a20 * a31 - a21 * a30,
    b07 = a20 * a32 - a22 * a30,
    b08 = a20 * a33 - a23 * a30,
    b09 = a21 * a32 - a22 * a31,
    b10 = a21 * a33 - a23 * a31,
    b11 = a22 * a33 - a23 * a32,

    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    return mat4(
        a11 * b11 - a12 * b10 + a13 * b09,
        a02 * b10 - a01 * b11 - a03 * b09,
        a31 * b05 - a32 * b04 + a33 * b03,
        a22 * b04 - a21 * b05 - a23 * b03,
        a12 * b08 - a10 * b11 - a13 * b07,
        a00 * b11 - a02 * b08 + a03 * b07,
        a32 * b02 - a30 * b05 - a33 * b01,
        a20 * b05 - a22 * b02 + a23 * b01,
        a10 * b10 - a11 * b08 + a13 * b06,
        a01 * b08 - a00 * b10 - a03 * b06,
        a30 * b04 - a31 * b02 + a33 * b00,
        a21 * b02 - a20 * b04 - a23 * b00,
        a11 * b07 - a10 * b09 - a12 * b06,
        a00 * b09 - a01 * b07 + a02 * b06,
        a31 * b01 - a30 * b03 - a32 * b00,
        a20 * b03 - a21 * b01 + a22 * b00
    ) / det;
}


void main()
{
    int data = int(data1);
    int data2 = int(data2);
    int data3 = int(data3);

    int x = data2 & 63;
    int z = (data2>>6) & 63;
    int y = ((data2>>8)&240)|(data3>>12);

    vec3 position = vec3(x, y, z);


    int chunkIdx = data & 255;
    int uvIdx = (data>>8) & 3; //0,1,2,3
    int arrayIdx = chunkIdx*2+uvIdx/2;
    vec4 uv = chunks_uv[arrayIdx];
    float second = mod(float(uvIdx),2.0);
    float u = uv.x * mod(second+1.0,2.0) + uv.z * second;
    float v = uv.y * mod(second+1.0,2.0) + uv.w * second;

    vec4 minUvData = chunks_uv[chunkIdx*2];
    vec4 maxUvData = chunks_uv[chunkIdx*2+1];

    float uvW = maxUvData.z-minUvData.x;
    float uvH =maxUvData.y-minUvData.y;

    var_uvSize = vec4(minUvData.x,minUvData.y, uvW,uvH);
    var_tiles = vec2(data3 & 63,(data3>>6) & 63);


    //big tiles have less texture bleeding
    //for big tiles not change it too much
    var_uvToCenter = vec2(min(uvW,0.1)/2.0*0.50,min(uvH,0.1)/2.0*0.50) * UV_TO_CENTER[uvIdx];
    //var_texcoord0 = vec2(u,v);
    //normalize 0-1
    var_texcoord0 = vec2((u-minUvData.x)/uvW,(v-minUvData.y)/uvH);
    //make tiles
   // var_texcoord0 = var_texcoord0 * var_tiles;

    int side = (data>>10) & 7;
    int ao = (data>>13) & 3;
    //FIXED tjuction. Make every triangle a little bit bigger
    if(side ==0){
        position.xz += vec2(UV_TO_CENTER[uvIdx].x,-UV_TO_CENTER[uvIdx].y)*-0.001;
    }
    if(side ==1){
        position.xz += vec2(-UV_TO_CENTER[uvIdx].x,-UV_TO_CENTER[uvIdx].y)*-0.001;
    }
    if(side ==2 || side == 3){
     //   position.zy += UV_TO_CENTER[uvIdx]*0.1;
    }
    if(side ==4 || side == 5){
      //  position.yz += UV_TO_CENTER[uvIdx]*0.1;
    }


    vec3 normal =NORMALS[side];
    var_light_power = LIGHT_POWER[side]*AO_POWER[ao];
    var_light_power = AO_POWER[ao];


   //Illumination START
    mat4 mtx_inv_view = mat4_inverse(mtx_view);
    var_camera_position = (mtx_inv_view * vec4(0.0, 0.0, 0.0, 1.0)).xyz;

    vec4 world_position = mtx_world * vec4(position.xyz, 1.0);
    var_world_position = world_position.xyz;

    vec4 view_position = mtx_view * world_position;
    var_view_position = view_position.xyz;

    mat3 mtx_normal = mat3_transpose(mat3_inverse(mat4_to_mat3(mtx_world)));
    var_world_normal = normalize(mtx_normal * normal);
    //Illumination END

    //region shadow
    var_texcoord0_shadow = mtx_light * vec4(world_position.xyz,1);
    //endregion

    gl_Position = mtx_proj * view_position;
}
